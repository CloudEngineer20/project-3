# This config is equivalent to both the '.circleci/extended/orb-free.yml' and the base '.circleci/config.yml'
version: 2.1          
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
            cd dist
            ls
    
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
             cd dist
             ls
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
      docker:
          - image: circleci/node:13.8.0
      steps:
         - checkout
         - restore_cache:
            keys: [frontend-build]
         - run:
            name: Front-end Test
            command: |
              cd frontend
              npm install
              npm run test
                
  test-backend:
    docker:
        - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Test
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
              keys: [frontend-build]
        - run:
            name: scan-frontend dependencies
            command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
     - checkout
     - restore_cache:
          keys: [backend-build]
     - run:
        name: scan-backend dependencies
        command: |
           cd backend
           npm install
           npm audit fix --audit-level=critical --force
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
        - checkout
        - run:
            name: Install tar/gzip utility
            command: |
              yum -y install tar gzip curl
        - run:
            name: Ensure back-end infrastructure exists
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeople-backend \
                --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
                
        - run:
            name: Get and store backend IP
            command: |
              #URLS=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${WORKFLOW_ID}" --output text >> inventory.txt) 
              # echo $URLS
              aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text >> inventory.txt
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data https://api.memstash.io/values/url_${WORKFLOW_ID}       
        - run:
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapepole-frontend \
                --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"   
                # exit 1
        - run:
            name: Add back-end ip to ansible inventory
            command: |
              # Your code here
              aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text >> inventory
              # exit 1
        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt
    
workflows:
   project3:
     jobs:
       - build-frontend
       - build-backend
       - test-frontend:
          requires:
          - build-frontend
       - test-backend:
          requires:
          - build-backend
       - scan-frontend:
           requires:
           - test-frontend
       - scan-backend:
           requires:
             - test-backend
       - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]

