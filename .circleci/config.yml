# This config is equivalent to both the '.circleci/extended/orb-free.yml' and the base '.circleci/config.yml'
version: 2.1          
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
            cd dist
            ls
    
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
             cd dist
             ls
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
      docker:
          - image: circleci/node:13.8.0
      steps:
         - checkout
         - restore_cache:
            keys: [frontend-build]
         - run:
            name: Front-end Test
            command: |
              cd frontend
              npm install
              npm run test
                
  test-backend:
    docker:
        - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Test
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
              keys: [frontend-build]
        - run:
            name: scan-frontend dependencies
            command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
     - checkout
     - restore_cache:
          keys: [backend-build]
     - run:
        name: scan-backend dependencies
        command: |
           cd backend
           npm install
           npm audit fix --audit-level=critical --force
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
        - checkout
        - run:
            name: Install tar/gzip utility
            command: |
              yum -y install tar gzip curl
        - run:
            name: Ensure back-end infrastructure exists
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeople-backend \
                --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 

        - run:
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapepole-frontend \
                --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"   
                # exit 1
        - run:
            name: Add back-end ip to ansible inventory
            command: |
             cd .circleci/ansible/
             URLS=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend" --output text) 
             echo $URLS
             curl -H "Content-Type: text/plain" -H "token: 7c03b08d-890a-4c26-9085-3050575d3772" --request PUT --data "$URLS" https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7} 
             echo "[web]" >> ./inventory.txt
             echo $URLS >> ./inventory.txt
             cat ./inventory.txt
        - persist_to_workspace:
            root: ansible
            paths:
               - ./inventory.txt            
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["9f:b3:62:5d:62:c4:d3:83:e0:a7:1f:a3:44:f4:32:12"]
      - attach_workspace:
          at: /tmp/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
                python3 \
                py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
                awscli \
            && rm -rf /var/cache/apk/*
            apk add --update ansible      
      - run:
          name: Configure server
          command: |
            ansible-playbook -i /tmp/ansible/inventory.txt .circleci/ansible/configure-server.yml   

    
workflows:
   project3:
     jobs:
       - build-frontend
       - build-backend
       - test-frontend:
          requires:
          - build-frontend
       - test-backend:
          requires:
          - build-backend
       - scan-frontend:
           requires:
           - test-frontend
       - scan-backend:
           requires:
             - test-backend
       - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
       - configure-infrastructure:
          requires: [deploy-infrastructure]
